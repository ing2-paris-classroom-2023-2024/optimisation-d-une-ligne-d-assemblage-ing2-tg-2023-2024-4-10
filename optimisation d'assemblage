#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define PATH_PRECEDENCE "./precedences.txt"
#define PATH_EXCLUSION "./exclusions.txt"
#define PATH_OPERATION "./operations.txt"
#define PATH_CYCLE "./temps_cycle.txt"
#define MAX_SIZE 100

typedef int Op;

typedef struct
{
	Op Op1;
	Op Op2;
} Exclusion;

typedef struct
{
	Op Op1;
	Op Op2;
} Precedence;

typedef struct
{
	Op Op;
	double Duration;
} Duration;

typedef struct
{
	Op Ops[MAX_SIZE];
	int Nb_Ops;
} Station;


struct Node
{
	Op vertex;
	struct Node *next;
};

typedef struct
{
	int numVertices;
	struct Node **adjLists;
} Graph;


struct queue
{
	Op items[MAX_SIZE];
	Op front;
	Op rear;
};

struct queue *create_queue()
{
	struct queue *q = malloc(sizeof(struct queue));
	q->front = -1;
	q->rear = -1;
	return q;
}

int is_empty(struct queue *q)
{
	return q->rear == -1;
}

void enqueue(struct queue *q, int value)
{
	if (q->rear == MAX_SIZE - 1)
	{
		return;
	}
	else
	{
		if (q->front == -1)
		{
			q->front = 0;
		}

		q->rear++;
		q->items[q->rear] = value;
	}
}

Op dequeue(struct queue *q)
{
	Op item;
	if (is_empty(q))
	{
		item = -1;
	}
	else
	{
		item = q->items[q->front];
		q->front++;

		if (q->front > q->rear)
		{
			q->front = q->rear = -1;
		}
	}
	return item;
}

void print_stations(Station const *const stations, int const nb_stations)
{
	for (int i = 0; i < nb_stations; i++)
	{
		printf("Station %d : ", i);
		for (int j = 0; j < stations[i].Nb_Ops; j++)
		{
			printf("%d ", stations[i].Ops[j]);
		}
		printf("\n");
	}
}

int read_exclusions(char const *const path, Exclusion *exclusions, int *nb_exclusions)
{
	FILE *file = fopen(path, "r");
	if (file == NULL)
	{
		printf("Error while opening file %s\n", path);
		return 1;
	}

	Op Op1, Op2;
	int i = 0;
	while (fscanf(file, "%d %d", &Op1, &Op2) != EOF)
	{
		exclusions[i].Op1 = Op1;
		exclusions[i].Op2 = Op2;
		i++;
	}

	*nb_exclusions = i;
	fclose(file);
	return 0;
}

int read_precedences(char const *const path, Precedence *precedences, int *nb_precedences)
{
	FILE *file = fopen(path, "r");
	if (file == NULL)
	{
		printf("Error while opening file %s\n", path);
		return 1;
	}

	Op Op1, Op2;
	int i = 0;
	while (fscanf(file, "%d %d", &Op1, &Op2) != EOF)
	{
		precedences[i].Op1 = Op1;
		precedences[i].Op2 = Op2;
		i++;
	}

	*nb_precedences = i;
	fclose(file);
	return 0;
}

int read_durations(char const *const path, Duration *durations, int *nb_durations)
{
	FILE *file = fopen(path, "r");
	if (file == NULL)
	{
		printf("Error while opening file %s\n", path);
		return 1;
	}

	Op Op;
	double duration;
	int i = 0;
	while (fscanf(file, "%d %lf", &Op, &duration) != EOF)
	{
		durations[i].Op = Op;
		durations[i].Duration = duration;
		i++;
	}

	*nb_durations = i;
	fclose(file);
	return 0;
}

int read_cycle(char const *const path, int *cycle)
{
	FILE *file = fopen(path, "r");
	if (file == NULL)
	{
		printf("Error while opening file %s\n", path);
		return 1;
	}

	int c;
	fscanf(file, "%d", &c);
	*cycle = c;
	fclose(file);
	return 0;
}

int is_op_in_station(Station const *const station, Op const op)
{
	for (int i = 0; i < station->Nb_Ops; i++)
	{
		if (station->Ops[i] == op)
		{
			return 1;
		}
	}

	return 0;
}

Op get_other_op(Exclusion const *const excl, Op const op)
{
	if (excl->Op1 == op)
	{
		return excl->Op2;
	}
	else if (excl->Op2 == op)
	{
		return excl->Op1;
	}
	else
	{
		return -1;
	}
}

int is_enemy(Exclusion const *const exclusions, int const nb_exclusions, Op const op1, Op const op2)
{
	for (int i = 0; i < nb_exclusions; i++)
	{
		Exclusion excl = exclusions[i];

		if ((excl.Op1 == op1 && excl.Op2 == op2) || (excl.Op1 == op2 && excl.Op2 == op1))
		{
			return 1;
		}
	}

	return 0;
}

double current_time(Station const *const station, Duration const *const durations, int const nb_durations)
{
	double time = 0.0;

	for (int i = 0; i < station->Nb_Ops; i++)
	{
		Op op = station->Ops[i];

		for (int j = 0; j < nb_durations; j++)
		{
			Duration duration = durations[j];

			if (duration.Op == op)
			{
				time += duration.Duration;
				break;
			}
		}
	}

	return time;
}


void optimize_exclusions(Station *stations, int *nb_stations, Op const *const ops, int const nb_ops, Exclusion const *const excls, int const nb_excls)
{
	*nb_stations = 0;

	for (int iop = 0; iop < nb_ops; iop++)
	{
		Op op = ops[iop];
		int found = 0;
		int sidx = 0;

		while (!found)
		{
			int has_enemy = 0;

			for (int jop = 0; jop < stations[sidx].Nb_Ops; jop++)
			{
				Op other_op = stations[sidx].Ops[jop];

				if (is_enemy(excls, nb_excls, op, other_op))
				{
					has_enemy = 1;
					break;
				}
			}

			if (!has_enemy)
			{
				stations[sidx].Ops[stations[sidx].Nb_Ops] = op;
				stations[sidx].Nb_Ops++;
				found = 1; /* !! */

				if (sidx == *nb_stations)
				{
					(*nb_stations)++;
				}
			}
			else
			{
				sidx++;
			}
		}
	}
}

Graph *build_graph(Op const *const ops, int const nb_ops, Precedence *precedences, int *nb_precedences)
{
	Graph *graph = malloc(sizeof(Graph));
	graph->numVertices = nb_ops;
	graph->adjLists = malloc(nb_ops * sizeof(struct Node *));

	for (int iop = 0; iop < nb_ops; iop++)
	{
		struct Node *head = malloc(sizeof(struct Node));
		head->vertex = ops[iop];
		head->next = NULL;
		graph->adjLists[iop] = head;

		for (int ip = 0; ip < *nb_precedences; ip++)
		{
			Precedence precedence = precedences[ip];
			Op op1 = precedence.Op1;
			Op op2 = precedence.Op2;

			if (op1 == ops[iop])
			{
				struct Node *node = malloc(sizeof(struct Node));
				node->vertex = op2;
				node->next = NULL;

				for (struct Node *temp = head; temp != NULL; temp = temp->next)
				{
					if (temp->next == NULL)
					{
						temp->next = node;
						break;
					}
				}
			}
		}
	}

	return graph;
}

int is_edge(Graph *graph, Op const op1, Op const op2)
{
	for (int i = 0; i < graph->numVertices; i++)
	{
		struct Node *temp = graph->adjLists[i];

		if (temp->vertex == op1)
		{
			while (temp->next != NULL)
			{
				temp = temp->next;

				if (temp->vertex == op2)
				{
					return 1;
				}
			}

			return 0;
		}
	}

	return 0;
}

void print_graph(Graph *graph)
{
	for (int i = 0; i < graph->numVertices; i++)
	{
		struct Node *temp = graph->adjLists[i];

		printf("%d : ", temp->vertex);

		while (temp->next != NULL)
		{
			temp = temp->next;
			printf("%d ", temp->vertex);
		}

		printf("\n");
	}
}

void clean_graph(Graph *graph)
{
	for (int i = 0; i < graph->numVertices; i++)
	{
		struct Node *temp = graph->adjLists[i];

		while (temp->next != NULL)
		{
			struct Node *next = temp->next;
			free(temp);
			temp = next;
		}

		free(temp);
	}

	free(graph->adjLists);
	free(graph);
}

void find_roots(Graph *graph, struct Node **roots, int *nb_roots)
{
	*nb_roots = 0;

	for (int i = 0; i < graph->numVertices; i++)
	{
		struct Node *temp = graph->adjLists[i];
		int is_root = 1;

		for (int j = 0; j < graph->numVertices; j++)
		{
			if (is_edge(graph, graph->adjLists[j]->vertex, temp->vertex))
			{
				is_root = 0;
				break;
			}
		}

		if (is_root)
		{
			roots[*nb_roots] = temp;
			(*nb_roots)++;
		}
	}
}

int find_station(Station *stations, int *nb_stations, int from_idx, int max_time, Duration *durations, int *nb_durations, Op op, Op const *const ops, int const nb_ops)
{
	double duration = 0.0;

	for (int i = 0; i < *nb_durations; i++)
	{
		if (durations[i].Op == op)
		{
			duration = durations[i].Duration;
			break;
		}
	}

	for (int i = from_idx; i < *nb_stations; i++)
	{
		double cur_time = current_time(&stations[i], durations, *nb_durations);
		double new_time = cur_time + duration;

		if (new_time > max_time)
		{
			continue;
		}

		return i;
	}

	return -1;
}
