#include <stdio.h>
#include <stdlib.h>

void exclusion_algorithm(int V[], int E[][2], int m, int n);
void precedence_algorithm(int V[], int A[][2], int n);
void operation_algorithm(int V[], double tj[], int n, double T0);
void print_results(int V[], int n);

int main() {

    FILE *file_exclusion = fopen("exclusion.txt", "r");
    if (file_exclusion == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier exclusion.txt\n");
        return 1;
    }

    int n_exclusion, i, j;
    fscanf(file_exclusion, "%d", &n_exclusion);

    int (*E)[2] = malloc(n_exclusion * sizeof(int[2]));

    for (int k = 0; k < n_exclusion; k++) {
        fscanf(file_exclusion, "%d %d", &i, &j);
        E[k][0] = i;
        E[k][1] = j;
    }

    fclose(file_exclusion);

    int *V_exclusion = malloc(n_exclusion * sizeof(int));
    exclusion_algorithm(V_exclusion, E, n_exclusion);

    FILE *file_precedence = fopen("precedences.txt", "r");
    if (file_precedence == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier precedences.txt\n");
        return 1;
    }

    int n_precedence;
    fscanf(file_precedence, "%d", &n_precedence);

    int (*A)[2] = malloc(n_precedence * sizeof(int[2]));

    for (int k = 0; k < n_precedence; k++) {
        fscanf(file_precedence, "%d %d", &i, &j);
        A[k][0] = i;
        A[k][1] = j;
    }
