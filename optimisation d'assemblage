#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define PATH_PRECEDENCE "./precedences.txt"
#define PATH_EXCLUSION "./exclusions.txt"
#define PATH_OPERATION "./operations.txt"
#define PATH_CYCLE "./temps_cycle.txt"
#define MAX_SIZE 100

typedef int Op;

typedef struct
{
	Op Op1;
	Op Op2;
} Exclusion;

typedef struct
{
	Op Op1;
	Op Op2;
} Precedence;

typedef struct
{
	Op Op;
	double Duration;
} Duration;

typedef struct
{
	Op Ops[MAX_SIZE];
	int Nb_Ops;
} Station;


struct Node
{
	Op vertex;
	struct Node *next;
};

typedef struct
{
	int numVertices;
	struct Node **adjLists;
} Graph;


struct queue
{
	Op items[MAX_SIZE];
	Op front;
	Op rear;
};

struct queue *create_queue()
{
	struct queue *q = malloc(sizeof(struct queue));
	q->front = -1;
	q->rear = -1;
	return q;
}

int is_empty(struct queue *q)
{
	return q->rear == -1;
}

void enqueue(struct queue *q, int value)
{
	if (q->rear == MAX_SIZE - 1)
	{
		return;
	}
	else
	{
		if (q->front == -1)
		{
			q->front = 0;
		}

		q->rear++;
		q->items[q->rear] = value;
	}
}

Op dequeue(struct queue *q)
{
	Op item;
	if (is_empty(q))
	{
		item = -1;
	}
	else
	{
		item = q->items[q->front];
		q->front++;

		if (q->front > q->rear)
		{
			q->front = q->rear = -1;
		}
	}
	return item;
}


void print_stations(Station const *const stations, int const nb_stations)
{
	for (int i = 0; i < nb_stations; i++)
	{
		printf("Station %d : ", i);
		for (int j = 0; j < stations[i].Nb_Ops; j++)
		{
			printf("%d ", stations[i].Ops[j]);
		}
		printf("\n");
	}
}
int read_exclusions(char const *const path, Exclusion *exclusions, int *nb_exclusions)
{
	FILE *file = fopen(path, "r");
	if (file == NULL)
	{
		printf("Error while opening file %s\n", path);
		return 1;
	}

	Op Op1, Op2;
	int i = 0;
	while (fscanf(file, "%d %d", &Op1, &Op2) != EOF)
	{
		exclusions[i].Op1 = Op1;
		exclusions[i].Op2 = Op2;
		i++;
	}

	*nb_exclusions = i;
	fclose(file);
	return 0;
}
